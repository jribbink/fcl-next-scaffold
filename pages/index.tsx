import Head from "next/head";
import { useFlow } from "../contexts/FlowContext";
import {
  Box,
  Button,
  Card,
  CardHeader,
  Flex,
  Heading,
  SimpleGrid,
  Spinner,
  Text,
} from "@chakra-ui/react";
import { useNFTs } from "../hooks/useNFTs";
import NFTGrid from "../components/NFTGrid";
import { useRouter } from "next/router";
import mintNFTCadence from "../cadence/transactions/example-nft/mint_nft.cdc";
import destroyNFTCadence from "../cadence/transactions/example-nft/destroy_nft.cdc";
import * as fcl from "@onflow/fcl";

export default function Home() {
  const router = useRouter();
  const flow = useFlow();
  const { nfts, mutate: mutateNFTs } = useNFTs();

  async function mintNFT() {
    return fcl
      .mutate({
        cadence: mintNFTCadence,
        limit: 9999,
        authz: flow.authz,
        args: (arg: any, t: any) => [arg(null, t.Optional(t.Address))],
      } as any)
      .then((txId) => fcl.tx(txId).onceSealed())
      .then((status) => {
        if (status.errorMessage) {
          throw new Error(status.errorMessage);
        }
        mutateNFTs();
      });
  }

  async function destroyNFT(id: string) {
    return fcl
      .mutate({
        cadence: destroyNFTCadence,
        limit: 9999,
        authz: flow.authz,
        args: (arg: any, t: any) => [arg(id, t.UInt64)],
      } as any)
      .then((txId) => fcl.tx(txId).onceSealed())
      .then((status) => {
        if (status.errorMessage) {
          throw new Error(status.errorMessage);
        }
        mutateNFTs();
      });
  }

  return (
    <>
      <Flex flexDirection="column" gap={8}>
        <Heading>Child Account (App)</Heading>

        <Text>
          You are currently viewing your NFTs on the &quot;child account&quot;
          which has been transparently generated by the application.
          Transactions in this mode will run{" "}
          <b>without any additional approvals.</b>
        </Text>

        {flow.isLoggedIn === null ? (
          <Flex justifyContent="center">
            <Spinner size="lg" />
          </Flex>
        ) : flow.isLoggedIn ? (
          <NFTGrid
            nfts={nfts}
            onMintNFT={mintNFT}
            onDestroyNFT={(id) => destroyNFT(id)}
          ></NFTGrid>
        ) : (
          <Flex flexDirection="column" gap={4} pt={4}>
            <Flex justifyContent="center">
              <Text fontWeight="bold" fontSize="lg">
                To get started, you must sign in or sign up
              </Text>
            </Flex>
            <Flex justifyContent="center">
              <Button colorScheme="blue" size="lg" onClick={() => flow.login()}>
                Sign in/Sign Up
              </Button>
            </Flex>
          </Flex>
        )}
      </Flex>
      <Head>
        <title>FCL Next Scaffold</title>
        <meta
          name="description"
          content="FCL Next Scaffold for the Flow Blockchain"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
    </>
  );
}
